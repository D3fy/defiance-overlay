#!/usr/bin/env python3

# This file is licensed under the terms of the GNU General Public License version 3 and is part
# of the checkbox package.

import sys
import os
import time

from subprocess import (
    check_call,
    check_output,
    CalledProcessError,
    )

from uuid import uuid4
from argparse import ArgumentParser

CONNECTIONS_PATH = '/etc/NetworkManager/system-connections/'


def connection_section(ssid, uuid):

    if not uuid:
        uuid = uuid4()

    connection = """
[connection]
id=%s
uuid=%s
type=802-11-wireless
    """ % (ssid, uuid)

    wireless = """
[802-11-wireless]
ssid=%s
mode=infrastructure""" % (ssid)

    return connection + wireless


def security_section(security, key):
    # Add security field to 802-11-wireless section
    wireless_security = """
security=802-11-wireless-security

[802-11-wireless-security]
    """

    if security.lower() == 'wpa':
        wireless_security += """
key-mgmt=wpa-psk
auth-alg=open
psk=%s
        """ % key

    elif security.lower() == 'wep':
        wireless_security += """
key-mgmt=none
wep-key=%s
        """ % key

    return wireless_security


def ip_sections():
    ip = """
[ipv4]
method=auto

[ipv6]
method=auto
    """

    return ip


def block_until_created(connection, retries, interval):
    time.sleep(2)
    while retries > 0:
        nmcli_con_list = check_output(['nmcli', 'con', 'list'], universal_newlines=True)

        if connection in nmcli_con_list:
            print("Connection %s registered" % connection)
            break

        time.sleep(interval)
        retries = retries - 1

    if retries <= 0:
        print("Failed to register %s." % connection, file=sys.stderr)
        sys.exit(1)
    else:
        try:
            nmcli_con_up = check_call(['nmcli', 'con', 'up', 'id', connection])
            print("Connection %s activated." % connection)
        except CalledProcessError as error:
            print("Failed to activate %s." % connection, file=sys.stderr)
            sys.exit(error.returncode)

def main():
    parser = ArgumentParser()

    parser.add_argument('ssid',
                      help="The SSID to connect to.")
    parser.add_argument('-S', '--security',
                      help=("The type of security to be used "
                            "by the connection. One of wpa and wep. "
                            "No security will be used "
                            "if nothing is specified."))
    parser.add_argument('-K', '--key',
                      help="The encryption key required by the router.")
    parser.add_argument('-U', '--uuid',
                      help="""The uuid to assign to the connection for use by
                            NetworkManager. One will be generated if not
                            specified here.""")
    parser.add_argument('-R', '--retries',
                      help="""The number of times to attempt bringing up the
                              connection until it is confirmed as active.""",
                      default=5)
    parser.add_argument('-I', '--interval',
                      help=("The time to wait between attempts to detect the "
                            "registration of the connection."),
                      default=2)

    args = parser.parse_args()

    connection_info = connection_section(args.ssid, args.uuid)

    if args.security:
        # Set security options
        if not args.key:
            print("You need to specify a key using --key "
                  "if using wireless security.", file=sys.stderr)
            sys.exit(1)

        connection_info += security_section(args.security, args.key)
    elif args.key:
        print("You specified an encryption key "
              "but did not give a security type using --security.", file=sys.stderr)
        sys.exit(1)

    try:
        check_call(['rfkill','unblock','wlan','wifi'])
    except CalledProcessError:
        print("Could not unblock wireless devices with rfkill.", file=sys.stderr)
        # Don't fail the script if unblock didn't work though

    connection_info += ip_sections()

    try:
        connection_file = open(CONNECTIONS_PATH + args.ssid, 'w')
        connection_file.write(connection_info)
        os.fchmod(connection_file.fileno(), 0o600)
        connection_file.close()
    except IOError:
        print("Can't write to " + CONNECTIONS_PATH + args.ssid
              + ". Is this command being run as root?", file=sys.stderr)
        sys.exit(1)

    block_until_created(args.ssid, args.retries, args.interval)

if __name__ == "__main__":
    main()
